{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RequestService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8082/api/requests';\n    this.apiUrll = 'http://localhost:8082/api/requests/create'; // Changez l'URL en fonction de votre API\n  }\n\n  createRequest(request) {\n    return this.http.post(this.apiUrll, request);\n  }\n  getAllRequests() {\n    return this.http.get(`${this.baseUrl}/all`);\n  }\n  getRequestsByEmployee(employeeId) {\n    this.http.get(`http://localhost:8082/api/requests?employeeId=${employeeId}`).subscribe(data => {\n      console.log(data);\n    }, error => {\n      console.error(error);\n    });\n  }\n  deleteRequest(id) {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n  getRequestById(id) {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n  updateRequest(id, updatedRequest) {\n    return this.http.put(`${this.baseUrl}/${id}`, updatedRequest);\n  }\n  updateStatus(id, status) {\n    return this.http.put(`${this.baseUrl}/${id}/status?status=${status}`, {});\n  }\n  static {\n    this.ɵfac = function RequestService_Factory(t) {\n      return new (t || RequestService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RequestService,\n      factory: RequestService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["RequestService","constructor","http","baseUrl","apiUrll","createRequest","request","post","getAllRequests","get","getRequestsByEmployee","employeeId","subscribe","data","console","log","error","deleteRequest","id","delete","getRequestById","updateRequest","updatedRequest","put","updateStatus","status","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\USER\\Desktop\\OumaimaPI\\projetttttttt\\projetttttttt\\src\\app\\core\\services\\request.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RequestService {\n\n  private baseUrl = 'http://localhost:8082/api/requests';\n\n  constructor(private http: HttpClient) {}\n\n  private apiUrll = 'http://localhost:8082/api/requests/create';  // Changez l'URL en fonction de votre API\n\n  \n\n  createRequest(request: any): Observable<any> {\n    return this.http.post<any>(this.apiUrll, request);\n  }\n\n  getAllRequests(): Observable<Request[]> {\n    return this.http.get<Request[]>(`${this.baseUrl}/all`);\n  }\n\n  getRequestsByEmployee(employeeId: string): Observable<Request[]> {\n    this.http.get(`http://localhost:8082/api/requests?employeeId=${employeeId}`).subscribe(\n      (data) => {\n        console.log(data);\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n    \n  }\n\n  deleteRequest(id: string): Observable<any> {\n    return this.http.delete<any>(`${this.baseUrl}/${id}`);\n  }\n  \n  \n \n  getRequestById(id: string): Observable<any> {\n    return this.http.get<any>(`${this.baseUrl}/${id}`);\n  }\n\n  updateRequest(id: string, updatedRequest: any): Observable<any> {\n    return this.http.put<any>(`${this.baseUrl}/${id}`, updatedRequest);\n  }\n  \n  \n  \n  \n\n  updateStatus(id: string, status: string): Observable<Request> {\n    return this.http.put<Request>(`${this.baseUrl}/${id}/status?status=${status}`, {});\n  }\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,cAAc;EAIzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,oCAAoC;IAI9C,KAAAC,OAAO,GAAG,2CAA2C,CAAC,CAAE;EAFzB;;EAMvCC,aAAaA,CAACC,OAAY;IACxB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAM,IAAI,CAACH,OAAO,EAAEE,OAAO,CAAC;EACnD;EAEAE,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAY,GAAG,IAAI,CAACN,OAAO,MAAM,CAAC;EACxD;EAEAO,qBAAqBA,CAACC,UAAkB;IACtC,IAAI,CAACT,IAAI,CAACO,GAAG,CAAC,iDAAiDE,UAAU,EAAE,CAAC,CAACC,SAAS,CACnFC,IAAI,IAAI;MACPC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACnB,CAAC,EACAG,KAAK,IAAI;MACRF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CACF;EAEH;EAEAC,aAAaA,CAACC,EAAU;IACtB,OAAO,IAAI,CAAChB,IAAI,CAACiB,MAAM,CAAM,GAAG,IAAI,CAAChB,OAAO,IAAIe,EAAE,EAAE,CAAC;EACvD;EAIAE,cAAcA,CAACF,EAAU;IACvB,OAAO,IAAI,CAAChB,IAAI,CAACO,GAAG,CAAM,GAAG,IAAI,CAACN,OAAO,IAAIe,EAAE,EAAE,CAAC;EACpD;EAEAG,aAAaA,CAACH,EAAU,EAAEI,cAAmB;IAC3C,OAAO,IAAI,CAACpB,IAAI,CAACqB,GAAG,CAAM,GAAG,IAAI,CAACpB,OAAO,IAAIe,EAAE,EAAE,EAAEI,cAAc,CAAC;EACpE;EAMAE,YAAYA,CAACN,EAAU,EAAEO,MAAc;IACrC,OAAO,IAAI,CAACvB,IAAI,CAACqB,GAAG,CAAU,GAAG,IAAI,CAACpB,OAAO,IAAIe,EAAE,kBAAkBO,MAAM,EAAE,EAAE,EAAE,CAAC;EACpF;;;uBAlDWzB,cAAc,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAd7B,cAAc;MAAA8B,OAAA,EAAd9B,cAAc,CAAA+B,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}