{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let AddPresenceComponent = class AddPresenceComponent {\n  constructor(http) {\n    this.http = http;\n    this.presence = {\n      employeeId: '',\n      date: '',\n      checkInTime: '',\n      checkOutTime: ''\n    };\n    this.successMessage = '';\n  }\n  ngOnInit() {\n    this.presence.date = this.getTodayDate();\n  }\n  getTodayDate() {\n    const today = new Date();\n    return today.toISOString().split('T')[0];\n  }\n  getCurrentTime() {\n    const now = new Date();\n    return now.toTimeString().slice(0, 5);\n  }\n  checkIn() {\n    this.presence.checkInTime = this.getCurrentTime();\n    this.presence.checkOutTime = ''; // reset au cas où\n    this.http.post('http://localhost:8082/api/attendances/saveAttendance', this.presence).subscribe({\n      next: response => {\n        this.successMessage = `Check-in enregistré à ${this.presence.checkInTime}`;\n      },\n      error: error => {\n        console.error('Erreur Check-in :', error);\n      }\n    });\n  }\n  checkOut() {\n    const checkOutTime = this.getCurrentTime();\n    this.http.put(`http://localhost:8082/api/attendances/updateCheckOutTime`, {\n      employeeId: this.presence.employeeId,\n      date: this.presence.date,\n      checkOutTime: checkOutTime\n    }).subscribe({\n      next: response => {\n        this.presence.checkOutTime = checkOutTime;\n        this.successMessage = `Check-out enregistré à ${checkOutTime}`;\n      },\n      error: error => {\n        console.error('Erreur Check-out :', error);\n      }\n    });\n  }\n};\nAddPresenceComponent = __decorate([Component({\n  selector: 'app-add-presence',\n  templateUrl: './add-presence.component.html',\n  styleUrls: ['./add-presence.component.css']\n})], AddPresenceComponent);","map":{"version":3,"names":["Component","AddPresenceComponent","constructor","http","presence","employeeId","date","checkInTime","checkOutTime","successMessage","ngOnInit","getTodayDate","today","Date","toISOString","split","getCurrentTime","now","toTimeString","slice","checkIn","post","subscribe","next","response","error","console","checkOut","put","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\USER\\Desktop\\OumaimaPI\\projetttttttt\\projetttttttt\\src\\app\\features\\components\\user\\add-presence\\add-presence.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-add-presence',\n  templateUrl: './add-presence.component.html',\n  styleUrls: ['./add-presence.component.css']\n})\nexport class AddPresenceComponent implements OnInit {\n  presence = {\n    employeeId: '',\n    date: '',\n    checkInTime: '',\n    checkOutTime: ''\n  };\n\n  successMessage = '';\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit(): void {\n    this.presence.date = this.getTodayDate();\n  }\n\n  getTodayDate(): string {\n    const today = new Date();\n    return today.toISOString().split('T')[0];\n  }\n\n  getCurrentTime(): string {\n    const now = new Date();\n    return now.toTimeString().slice(0, 5);\n  }\n\n  checkIn(): void {\n    this.presence.checkInTime = this.getCurrentTime();\n    this.presence.checkOutTime = ''; // reset au cas où\n    this.http.post('http://localhost:8082/api/attendances/saveAttendance', this.presence)\n      .subscribe({\n        next: response => {\n          this.successMessage = `Check-in enregistré à ${this.presence.checkInTime}`;\n        },\n        error: error => {\n          console.error('Erreur Check-in :', error);\n        }\n      });\n  }\n\n  checkOut(): void {\n    const checkOutTime = this.getCurrentTime();\n    this.http.put(`http://localhost:8082/api/attendances/updateCheckOutTime`, {\n      employeeId: this.presence.employeeId,\n      date: this.presence.date,\n      checkOutTime: checkOutTime\n    }).subscribe({\n      next: response => {\n        this.presence.checkOutTime = checkOutTime;\n        this.successMessage = `Check-out enregistré à ${checkOutTime}`;\n      },\n      error: error => {\n        console.error('Erreur Check-out :', error);\n      }\n    });\n  }\n}\n\n\n"],"mappings":";AACA,SAASA,SAAS,QAAgB,eAAe;AAO1C,WAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAU/BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IATxB,KAAAC,QAAQ,GAAG;MACTC,UAAU,EAAE,EAAE;MACdC,IAAI,EAAE,EAAE;MACRC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE;KACf;IAED,KAAAC,cAAc,GAAG,EAAE;EAEoB;EAEvCC,QAAQA,CAAA;IACN,IAAI,CAACN,QAAQ,CAACE,IAAI,GAAG,IAAI,CAACK,YAAY,EAAE;EAC1C;EAEAA,YAAYA,CAAA;IACV,MAAMC,KAAK,GAAG,IAAIC,IAAI,EAAE;IACxB,OAAOD,KAAK,CAACE,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC1C;EAEAC,cAAcA,CAAA;IACZ,MAAMC,GAAG,GAAG,IAAIJ,IAAI,EAAE;IACtB,OAAOI,GAAG,CAACC,YAAY,EAAE,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACvC;EAEAC,OAAOA,CAAA;IACL,IAAI,CAAChB,QAAQ,CAACG,WAAW,GAAG,IAAI,CAACS,cAAc,EAAE;IACjD,IAAI,CAACZ,QAAQ,CAACI,YAAY,GAAG,EAAE,CAAC,CAAC;IACjC,IAAI,CAACL,IAAI,CAACkB,IAAI,CAAC,sDAAsD,EAAE,IAAI,CAACjB,QAAQ,CAAC,CAClFkB,SAAS,CAAC;MACTC,IAAI,EAAEC,QAAQ,IAAG;QACf,IAAI,CAACf,cAAc,GAAG,yBAAyB,IAAI,CAACL,QAAQ,CAACG,WAAW,EAAE;MAC5E,CAAC;MACDkB,KAAK,EAAEA,KAAK,IAAG;QACbC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MAC3C;KACD,CAAC;EACN;EAEAE,QAAQA,CAAA;IACN,MAAMnB,YAAY,GAAG,IAAI,CAACQ,cAAc,EAAE;IAC1C,IAAI,CAACb,IAAI,CAACyB,GAAG,CAAC,0DAA0D,EAAE;MACxEvB,UAAU,EAAE,IAAI,CAACD,QAAQ,CAACC,UAAU;MACpCC,IAAI,EAAE,IAAI,CAACF,QAAQ,CAACE,IAAI;MACxBE,YAAY,EAAEA;KACf,CAAC,CAACc,SAAS,CAAC;MACXC,IAAI,EAAEC,QAAQ,IAAG;QACf,IAAI,CAACpB,QAAQ,CAACI,YAAY,GAAGA,YAAY;QACzC,IAAI,CAACC,cAAc,GAAG,0BAA0BD,YAAY,EAAE;MAChE,CAAC;MACDiB,KAAK,EAAEA,KAAK,IAAG;QACbC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC5C;KACD,CAAC;EACJ;CACD;AAxDYxB,oBAAoB,GAAA4B,UAAA,EALhC7B,SAAS,CAAC;EACT8B,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,C,EACW/B,oBAAoB,CAwDhC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}