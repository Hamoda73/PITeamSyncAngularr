{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PresenceService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8082/api/attendances';\n    this.employeeApiUrl = 'http://localhost:8082/api/employees'; // URL pour récupérer les employés\n  }\n\n  getAllPresences() {\n    return this.http.get(`${this.apiUrl}/all`).pipe(map(presences => presences.map(p => ({\n      ...p,\n      date: new Date(p.date),\n      hoursWorked: p.hoursWorked || 0,\n      overtimeHours: p.overtimeHours || 0\n    }))));\n  }\n  // Récupérer le nom de l'employé par ID\n  getEmployeeName(employeeId) {\n    return this.http.get(`${this.employeeApiUrl}/${employeeId}/name`);\n  }\n  getPresenceById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  savePresence(presence) {\n    return this.http.post(`${this.apiUrl}/saveAttendance`, presence);\n  }\n  updatePresence(id, presence) {\n    return this.http.put(`${this.apiUrl}/update/${id}`, presence);\n  }\n  updatePresence(id, presence) {\n    return this.http.put(`http://localhost:8080/api/attendances/update/${id}`, presence);\n  }\n  deletePresence(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  static {\n    this.ɵfac = function PresenceService_Factory(t) {\n      return new (t || PresenceService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PresenceService,\n      factory: PresenceService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","PresenceService","constructor","http","apiUrl","employeeApiUrl","getAllPresences","get","pipe","presences","p","date","Date","hoursWorked","overtimeHours","getEmployeeName","employeeId","getPresenceById","id","savePresence","presence","post","updatePresence","put","deletePresence","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\USER\\Desktop\\OumaimaPI\\projetttttttt\\projetttttttt\\src\\app\\core\\services\\presence.service.ts"],"sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, map, Observable, throwError } from 'rxjs';\nimport { Presence } from 'src/app/models/presencemodel';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PresenceService {\n\n  private apiUrl = 'http://localhost:8082/api/attendances';\n  private employeeApiUrl = 'http://localhost:8082/api/employees'; // URL pour récupérer les employés\n\n\n  constructor(private http: HttpClient) {}\n\n  \n  getAllPresences(): Observable<Presence[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/all`).pipe(\n      map(presences => presences.map(p => ({\n        ...p,\n        date: new Date(p.date), // Conversion de la date\n        hoursWorked: p.hoursWorked || 0,\n        overtimeHours: p.overtimeHours || 0\n      })))\n    );\n  }\n  // Récupérer le nom de l'employé par ID\n  getEmployeeName(employeeId: string): Observable<string> {\n    return this.http.get<string>(`${this.employeeApiUrl}/${employeeId}/name`);\n  }\n\n  \n\n  getPresenceById(id: string): Observable<Presence> {\n    return this.http.get<Presence>(`${this.apiUrl}/${id}`);\n  }\n\n  savePresence(presence: Presence): Observable<Presence> {\n    return this.http.post<Presence>(`${this.apiUrl}/saveAttendance`, presence);\n  }\n\n  updatePresence(id: string, presence: Presence): Observable<Presence> {\n    return this.http.put<Presence>(`${this.apiUrl}/update/${id}`, presence);\n  }\n\n  updatePresence(id: string, presence: Presence) {\n    return this.http.put<Presence>(`http://localhost:8080/api/attendances/update/${id}`, presence);\n  }\n  \n\n  deletePresence(id: string): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n  \n}\n\n"],"mappings":"AAGA,SAAqBA,GAAG,QAAgC,MAAM;;;AAM9D,OAAM,MAAOC,eAAe;EAM1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,MAAM,GAAG,uCAAuC;IAChD,KAAAC,cAAc,GAAG,qCAAqC,CAAC,CAAC;EAGzB;;EAGvCC,eAAeA,CAAA;IACb,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAQ,GAAG,IAAI,CAACH,MAAM,MAAM,CAAC,CAACI,IAAI,CACpDR,GAAG,CAACS,SAAS,IAAIA,SAAS,CAACT,GAAG,CAACU,CAAC,KAAK;MACnC,GAAGA,CAAC;MACJC,IAAI,EAAE,IAAIC,IAAI,CAACF,CAAC,CAACC,IAAI,CAAC;MACtBE,WAAW,EAAEH,CAAC,CAACG,WAAW,IAAI,CAAC;MAC/BC,aAAa,EAAEJ,CAAC,CAACI,aAAa,IAAI;KACnC,CAAC,CAAC,CAAC,CACL;EACH;EACA;EACAC,eAAeA,CAACC,UAAkB;IAChC,OAAO,IAAI,CAACb,IAAI,CAACI,GAAG,CAAS,GAAG,IAAI,CAACF,cAAc,IAAIW,UAAU,OAAO,CAAC;EAC3E;EAIAC,eAAeA,CAACC,EAAU;IACxB,OAAO,IAAI,CAACf,IAAI,CAACI,GAAG,CAAW,GAAG,IAAI,CAACH,MAAM,IAAIc,EAAE,EAAE,CAAC;EACxD;EAEAC,YAAYA,CAACC,QAAkB;IAC7B,OAAO,IAAI,CAACjB,IAAI,CAACkB,IAAI,CAAW,GAAG,IAAI,CAACjB,MAAM,iBAAiB,EAAEgB,QAAQ,CAAC;EAC5E;EAEAE,cAAcA,CAACJ,EAAU,EAAEE,QAAkB;IAC3C,OAAO,IAAI,CAACjB,IAAI,CAACoB,GAAG,CAAW,GAAG,IAAI,CAACnB,MAAM,WAAWc,EAAE,EAAE,EAAEE,QAAQ,CAAC;EACzE;EAEAE,cAAcA,CAACJ,EAAU,EAAEE,QAAkB;IAC3C,OAAO,IAAI,CAACjB,IAAI,CAACoB,GAAG,CAAW,gDAAgDL,EAAE,EAAE,EAAEE,QAAQ,CAAC;EAChG;EAGAI,cAAcA,CAACN,EAAU;IACvB,OAAO,IAAI,CAACf,IAAI,CAACsB,MAAM,CAAO,GAAG,IAAI,CAACrB,MAAM,IAAIc,EAAE,EAAE,CAAC;EACvD;;;uBA7CWjB,eAAe,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAf5B,eAAe;MAAA6B,OAAA,EAAf7B,eAAe,CAAA8B,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}