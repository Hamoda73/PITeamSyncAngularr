{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let PresenceListComponent = class PresenceListComponent {\n  constructor(presenceService, employeeService, router) {\n    this.presenceService = presenceService;\n    this.employeeService = employeeService;\n    this.router = router;\n    this.presences = [];\n    this.employees = [];\n  }\n  ngOnInit() {\n    this.loadEmployees();\n    this.loadPresences();\n  }\n  loadEmployees() {\n    this.employeeService.getAllEmployees().subscribe({\n      next: data => this.employees = data,\n      error: err => console.error(err)\n    });\n  }\n  // Méthode pour récupérer le nom\n  getEmployeeName(employeeId) {\n    const employee = this.employees.find(e => e.id === employeeId);\n    return employee ? employee.name : 'Employé inconnu';\n  }\n  loadPresences() {\n    this.presenceService.getAllPresences().subscribe({\n      next: data => {\n        this.presences = data;\n        console.log('Présences chargées:', data); // Pour debug\n      },\n\n      error: err => console.error('Erreur de chargement des présences', err)\n    });\n  }\n  onEdit(presence) {\n    this.router.navigate(['admin/attendances/edit', presence.id]);\n  }\n  onDelete(id) {\n    this.presenceService.deletePresence(id).subscribe({\n      next: () => this.loadPresences(),\n      error: err => console.error('Erreur suppression présence', err)\n    });\n  }\n};\nPresenceListComponent = __decorate([Component({\n  selector: 'app-presence-list',\n  templateUrl: './presence-list.component.html',\n  styleUrls: ['./presence-list.component.css']\n})], PresenceListComponent);","map":{"version":3,"names":["Component","PresenceListComponent","constructor","presenceService","employeeService","router","presences","employees","ngOnInit","loadEmployees","loadPresences","getAllEmployees","subscribe","next","data","error","err","console","getEmployeeName","employeeId","employee","find","e","id","name","getAllPresences","log","onEdit","presence","navigate","onDelete","deletePresence","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\USER\\Desktop\\OumaimaPI\\projetttttttt\\projetttttttt\\src\\app\\features\\components\\Presence\\presence-list\\presence-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {  Presence } from 'src/app/models/presencemodel';\nimport { PresenceService } from 'src/app/core/services/presence.service';\nimport { EmployeeService } from 'src/app/core/services/employee.service';\n\n\n@Component({\n  selector: 'app-presence-list',\n  templateUrl: './presence-list.component.html',\n  styleUrls: ['./presence-list.component.css']\n})\nexport class PresenceListComponent implements OnInit{\n\n  presences: any[] = [];\n  employees: any[] = [];\n\n\n\n  constructor(\n    private presenceService: PresenceService,\n    private employeeService: EmployeeService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.loadEmployees();\n    this.loadPresences();\n  }\n\nloadEmployees() {\n  this.employeeService.getAllEmployees().subscribe({\n    next: (data) => this.employees = data,\n    error: (err) => console.error(err)\n  });\n}\n\n\n\n\n// Méthode pour récupérer le nom\ngetEmployeeName(employeeId: string): string {\n  const employee = this.employees.find(e => e.id === employeeId);\n  return employee ? employee.name : 'Employé inconnu';\n}\n\n\n\n  loadPresences(): void {\n    this.presenceService.getAllPresences().subscribe({\n        next: (data) => {\n            this.presences = data;\n            console.log('Présences chargées:', data); // Pour debug\n        },\n        error: (err) => console.error('Erreur de chargement des présences', err)\n    });\n}\n\n  onEdit(presence: Presence): void {\n    this.router.navigate(['admin/attendances/edit', presence.id]);\n\n  }\n\n  onDelete(id: string): void {\n    this.presenceService.deletePresence(id).subscribe({\n      next: () => this.loadPresences(),\n      error: (err) => console.error('Erreur suppression présence', err)\n    });\n  }\n  \n\n}\n\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAY1C,WAAMC,qBAAqB,GAA3B,MAAMA,qBAAqB;EAOhCC,YACUC,eAAgC,EAChCC,eAAgC,EAChCC,MAAc;IAFd,KAAAF,eAAe,GAAfA,eAAe;IACf,KAAAC,eAAe,GAAfA,eAAe;IACf,KAAAC,MAAM,GAANA,MAAM;IARhB,KAAAC,SAAS,GAAU,EAAE;IACrB,KAAAC,SAAS,GAAU,EAAE;EAQlB;EAEHC,QAAQA,CAAA;IACN,IAAI,CAACC,aAAa,EAAE;IACpB,IAAI,CAACC,aAAa,EAAE;EACtB;EAEFD,aAAaA,CAAA;IACX,IAAI,CAACL,eAAe,CAACO,eAAe,EAAE,CAACC,SAAS,CAAC;MAC/CC,IAAI,EAAGC,IAAI,IAAK,IAAI,CAACP,SAAS,GAAGO,IAAI;MACrCC,KAAK,EAAGC,GAAG,IAAKC,OAAO,CAACF,KAAK,CAACC,GAAG;KAClC,CAAC;EACJ;EAKA;EACAE,eAAeA,CAACC,UAAkB;IAChC,MAAMC,QAAQ,GAAG,IAAI,CAACb,SAAS,CAACc,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKJ,UAAU,CAAC;IAC9D,OAAOC,QAAQ,GAAGA,QAAQ,CAACI,IAAI,GAAG,iBAAiB;EACrD;EAIEd,aAAaA,CAAA;IACX,IAAI,CAACP,eAAe,CAACsB,eAAe,EAAE,CAACb,SAAS,CAAC;MAC7CC,IAAI,EAAGC,IAAI,IAAI;QACX,IAAI,CAACR,SAAS,GAAGQ,IAAI;QACrBG,OAAO,CAACS,GAAG,CAAC,qBAAqB,EAAEZ,IAAI,CAAC,CAAC,CAAC;MAC9C,CAAC;;MACDC,KAAK,EAAGC,GAAG,IAAKC,OAAO,CAACF,KAAK,CAAC,oCAAoC,EAAEC,GAAG;KAC1E,CAAC;EACN;EAEEW,MAAMA,CAACC,QAAkB;IACvB,IAAI,CAACvB,MAAM,CAACwB,QAAQ,CAAC,CAAC,wBAAwB,EAAED,QAAQ,CAACL,EAAE,CAAC,CAAC;EAE/D;EAEAO,QAAQA,CAACP,EAAU;IACjB,IAAI,CAACpB,eAAe,CAAC4B,cAAc,CAACR,EAAE,CAAC,CAACX,SAAS,CAAC;MAChDC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAACH,aAAa,EAAE;MAChCK,KAAK,EAAGC,GAAG,IAAKC,OAAO,CAACF,KAAK,CAAC,6BAA6B,EAAEC,GAAG;KACjE,CAAC;EACJ;CAGD;AA3DYf,qBAAqB,GAAA+B,UAAA,EALjChC,SAAS,CAAC;EACTiC,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,C,EACWlC,qBAAqB,CA2DjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}