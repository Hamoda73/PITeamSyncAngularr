{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let MyrequestsComponent = class MyrequestsComponent {\n  constructor(route, requestService, router, fb) {\n    this.route = route;\n    this.requestService = requestService;\n    this.router = router;\n    this.fb = fb;\n    this.requests = [];\n    this.isEditing = false; // Variable pour activer/désactiver le mode édition\n    this.currentRequestId = null; // ID de la demande en cours d'édition\n    // Initialisation du formulaire\n    this.editRequestForm = this.fb.group({\n      type: ['', Validators.required],\n      employeeId: ['', Validators.required],\n      startDate: ['', Validators.required],\n      endDate: ['', Validators.required],\n      justification: ['']\n    });\n  }\n  ngOnInit() {\n    this.route.queryParams.subscribe(params => {\n      const empId = params['employeeId'];\n      console.log('Employee ID:', empId);\n      if (empId) {\n        this.requestService.getRequestsByEmployee(empId).subscribe(data => {\n          console.log('Requests:', data);\n          this.requests = data;\n          this.requests.forEach(request => {\n            console.log('Request ID:', request._id); // Vérifie les IDs des requêtes\n          });\n        });\n      }\n    });\n  }\n  // Fonction pour initialiser le formulaire en mode édition\n  editRequest(id) {\n    console.log('Request ID:', id);\n    if (id) {\n      this.isEditing = true;\n      this.currentRequestId = id;\n      this.requestService.getRequestById(id).subscribe(request => {\n        this.editRequestForm.patchValue({\n          type: request.type,\n          employeeId: request.employeeId,\n          startDate: new Date(request.startDate).toISOString().split('T')[0],\n          endDate: new Date(request.endDate).toISOString().split('T')[0],\n          justification: request.justification || ''\n        });\n      });\n    } else {\n      console.error('Request ID is undefined');\n    }\n  }\n  // Fonction pour soumettre le formulaire d'édition\n  submitEditRequest() {\n    if (this.editRequestForm.valid && this.currentRequestId) {\n      // Appeler la méthode updateRequest pour mettre à jour la demande sur le serveur\n      this.requestService.updateRequest(this.currentRequestId, this.editRequestForm.value).subscribe(updatedRequest => {\n        // Trouver l'index de la demande mise à jour dans le tableau `requests`\n        const index = this.requests.findIndex(request => request._id === this.currentRequestId);\n        if (index !== -1) {\n          // Remplacer la vieille demande avec la nouvelle dans le tableau `requests`\n          this.requests[index] = updatedRequest;\n          // Fermer le formulaire d'édition et revenir à la vue liste\n          this.isEditing = false;\n          // Rediriger l'utilisateur après la mise à jour\n          this.router.navigate(['/user/myrequests'], {\n            queryParams: {\n              employeeId: this.route.snapshot.queryParams['employeeId']\n            }\n          });\n        }\n      });\n    } else {\n      alert(\"Veuillez remplir tous les champs requis.\");\n    }\n  }\n};\nMyrequestsComponent = __decorate([Component({\n  selector: 'app-myrequests',\n  templateUrl: './myrequests.component.html',\n  styleUrls: ['./myrequests.component.css']\n})], MyrequestsComponent);","map":{"version":3,"names":["Component","Validators","MyrequestsComponent","constructor","route","requestService","router","fb","requests","isEditing","currentRequestId","editRequestForm","group","type","required","employeeId","startDate","endDate","justification","ngOnInit","queryParams","subscribe","params","empId","console","log","getRequestsByEmployee","data","forEach","request","_id","editRequest","id","getRequestById","patchValue","Date","toISOString","split","error","submitEditRequest","valid","updateRequest","value","updatedRequest","index","findIndex","navigate","snapshot","alert","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\USER\\Desktop\\OumaimaPI\\projetttttttt\\projetttttttt\\src\\app\\features\\components\\user\\request\\myrequests\\myrequests.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { RequestService } from 'src/app/core/services/request.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-myrequests',\n  templateUrl: './myrequests.component.html',\n  styleUrls: ['./myrequests.component.css']\n})\nexport class MyrequestsComponent implements OnInit {\n  \n  requests: any[] = [];\n  editRequestForm: FormGroup; // Formulaire d'édition\n  isEditing: boolean = false; // Variable pour activer/désactiver le mode édition\n  currentRequestId: string | null = null; // ID de la demande en cours d'édition\n\n  constructor(\n    private route: ActivatedRoute,\n    private requestService: RequestService,\n    private router: Router,\n    private fb: FormBuilder\n  ) {\n    // Initialisation du formulaire\n    this.editRequestForm = this.fb.group({\n      type: ['', Validators.required],\n      employeeId: ['', Validators.required],\n      startDate: ['', Validators.required],\n      endDate: ['', Validators.required],\n      justification: ['']\n    });\n  }\n\n  ngOnInit() {\n    this.route.queryParams.subscribe((params: any) => {\n      const empId = params['employeeId'];\n      console.log('Employee ID:', empId);\n  \n      if (empId) {\n        this.requestService.getRequestsByEmployee(empId).subscribe(data => {\n          console.log('Requests:', data);\n          this.requests = data;\n  \n          this.requests.forEach(request => {\n            console.log('Request ID:', request._id); // Vérifie les IDs des requêtes\n          });\n        });\n      }\n    });\n  }\n\n  // Fonction pour initialiser le formulaire en mode édition\n  \n  editRequest(id: string) {\n    console.log('Request ID:', id);\n    if (id) {\n      this.isEditing = true;\n      this.currentRequestId = id;\n  \n      this.requestService.getRequestById(id).subscribe(request => {\n        this.editRequestForm.patchValue({\n          type: request.type,\n          employeeId: request.employeeId,\n          startDate: new Date(request.startDate).toISOString().split('T')[0],\n          endDate: new Date(request.endDate).toISOString().split('T')[0],\n          justification: request.justification || ''\n        });\n      });\n    } else {\n      console.error('Request ID is undefined');\n    }\n  }\n  \n\n  // Fonction pour soumettre le formulaire d'édition\n  submitEditRequest() {\n    if (this.editRequestForm.valid && this.currentRequestId) {\n      // Appeler la méthode updateRequest pour mettre à jour la demande sur le serveur\n      this.requestService.updateRequest(this.currentRequestId, this.editRequestForm.value).subscribe(updatedRequest => {\n        // Trouver l'index de la demande mise à jour dans le tableau `requests`\n        const index = this.requests.findIndex(request => request._id === this.currentRequestId);\n  \n        if (index !== -1) {\n          // Remplacer la vieille demande avec la nouvelle dans le tableau `requests`\n          this.requests[index] = updatedRequest;\n  \n          // Fermer le formulaire d'édition et revenir à la vue liste\n          this.isEditing = false;\n  \n          // Rediriger l'utilisateur après la mise à jour\n          this.router.navigate(['/user/myrequests'], { queryParams: { employeeId: this.route.snapshot.queryParams['employeeId'] } });\n        }\n      });\n    } else {\n      alert(\"Veuillez remplir tous les champs requis.\");\n    }\n  }\n  \n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}