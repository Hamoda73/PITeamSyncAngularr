{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let RequestformComponent = class RequestformComponent {\n  constructor(fb, requestService, router, route) {\n    this.fb = fb;\n    this.requestService = requestService;\n    this.router = router;\n    this.route = route;\n    this.form = this.fb.group({\n      type: ['', Validators.required],\n      employeeId: ['', Validators.required],\n      startDate: ['', Validators.required],\n      endDate: ['', Validators.required],\n      justification: ['']\n    });\n    this.route.paramMap.subscribe(params => {\n      this.requestId = params.get('id');\n      if (this.requestId) {\n        this.requestService.getRequestById(this.requestId).subscribe(request => {\n          this.form.patchValue(request);\n        });\n      }\n    });\n  }\n  submitRequest() {\n    if (this.form.valid) {\n      if (this.requestId) {\n        // Mode édition\n        this.requestService.updateRequest(this.requestId, this.form.value).subscribe(() => {\n          this.router.navigate(['/user/myrequests'], {\n            queryParams: {\n              employeeId: this.form.value.employeeId\n            }\n          });\n        });\n      } else {\n        // Nouvelle requête\n        this.requestService.createRequest(this.form.value).subscribe(() => {\n          this.router.navigate(['/user/myrequests'], {\n            queryParams: {\n              employeeId: this.form.value.employeeId\n            }\n          });\n        });\n      }\n    } else {\n      alert(\"Merci de remplir tous les champs requis.\");\n    }\n  }\n};\nRequestformComponent = __decorate([Component({\n  selector: 'app-requestform',\n  templateUrl: './requestform.component.html',\n  styleUrls: ['./requestform.component.css']\n})], RequestformComponent);","map":{"version":3,"names":["Component","Validators","RequestformComponent","constructor","fb","requestService","router","route","form","group","type","required","employeeId","startDate","endDate","justification","paramMap","subscribe","params","requestId","get","getRequestById","request","patchValue","submitRequest","valid","updateRequest","value","navigate","queryParams","createRequest","alert","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\USER\\Desktop\\OumaimaPI\\projetttttttt\\projetttttttt\\src\\app\\features\\components\\user\\request\\requestform\\requestform.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { RequestService } from 'src/app/core/services/request.service';\n\n@Component({\n  selector: 'app-requestform',\n  templateUrl: './requestform.component.html',\n  styleUrls: ['./requestform.component.css']\n})\nexport class RequestformComponent {\n\n  form = this.fb.group({\n    type: ['', Validators.required],\n    employeeId: ['', Validators.required],\n    startDate: ['', Validators.required],\n    endDate: ['', Validators.required],\n    justification: ['']\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private requestService: RequestService,\n    private router: Router,\n    private route: ActivatedRoute\n  \n  ) {\n    this.route.paramMap.subscribe(params => {\n      this.requestId = params.get('id');\n      if (this.requestId) {\n        this.requestService.getRequestById(this.requestId).subscribe(request => {\n          this.form.patchValue(request);\n        });\n      }\n    });\n  }\n\n  submitRequest() {\n    if (this.form.valid) {\n      if (this.requestId) {\n        // Mode édition\n        this.requestService.updateRequest(this.requestId, this.form.value).subscribe(() => {\n          this.router.navigate(['/user/myrequests'], {\n            queryParams: { employeeId: this.form.value.employeeId }\n          });\n        });\n      } else {\n        // Nouvelle requête\n        this.requestService.createRequest(this.form.value).subscribe(() => {\n          this.router.navigate(['/user/myrequests'], {\n            queryParams: { employeeId: this.form.value.employeeId }\n          });\n        });\n      }\n    } else {\n      alert(\"Merci de remplir tous les champs requis.\");\n    }\n  }\n  \n  \n  \n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAsBC,UAAU,QAAQ,gBAAgB;AASjD,WAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAU/BC,YACUC,EAAe,EACfC,cAA8B,EAC9BC,MAAc,EACdC,KAAqB;IAHrB,KAAAH,EAAE,GAAFA,EAAE;IACF,KAAAC,cAAc,GAAdA,cAAc;IACd,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,KAAK,GAALA,KAAK;IAZf,KAAAC,IAAI,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MACnBC,IAAI,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MAC/BC,UAAU,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACU,QAAQ,CAAC;MACrCE,SAAS,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACU,QAAQ,CAAC;MACpCG,OAAO,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACU,QAAQ,CAAC;MAClCI,aAAa,EAAE,CAAC,EAAE;KACnB,CAAC;IASA,IAAI,CAACR,KAAK,CAACS,QAAQ,CAACC,SAAS,CAACC,MAAM,IAAG;MACrC,IAAI,CAACC,SAAS,GAAGD,MAAM,CAACE,GAAG,CAAC,IAAI,CAAC;MACjC,IAAI,IAAI,CAACD,SAAS,EAAE;QAClB,IAAI,CAACd,cAAc,CAACgB,cAAc,CAAC,IAAI,CAACF,SAAS,CAAC,CAACF,SAAS,CAACK,OAAO,IAAG;UACrE,IAAI,CAACd,IAAI,CAACe,UAAU,CAACD,OAAO,CAAC;QAC/B,CAAC,CAAC;;IAEN,CAAC,CAAC;EACJ;EAEAE,aAAaA,CAAA;IACX,IAAI,IAAI,CAAChB,IAAI,CAACiB,KAAK,EAAE;MACnB,IAAI,IAAI,CAACN,SAAS,EAAE;QAClB;QACA,IAAI,CAACd,cAAc,CAACqB,aAAa,CAAC,IAAI,CAACP,SAAS,EAAE,IAAI,CAACX,IAAI,CAACmB,KAAK,CAAC,CAACV,SAAS,CAAC,MAAK;UAChF,IAAI,CAACX,MAAM,CAACsB,QAAQ,CAAC,CAAC,kBAAkB,CAAC,EAAE;YACzCC,WAAW,EAAE;cAAEjB,UAAU,EAAE,IAAI,CAACJ,IAAI,CAACmB,KAAK,CAACf;YAAU;WACtD,CAAC;QACJ,CAAC,CAAC;OACH,MAAM;QACL;QACA,IAAI,CAACP,cAAc,CAACyB,aAAa,CAAC,IAAI,CAACtB,IAAI,CAACmB,KAAK,CAAC,CAACV,SAAS,CAAC,MAAK;UAChE,IAAI,CAACX,MAAM,CAACsB,QAAQ,CAAC,CAAC,kBAAkB,CAAC,EAAE;YACzCC,WAAW,EAAE;cAAEjB,UAAU,EAAE,IAAI,CAACJ,IAAI,CAACmB,KAAK,CAACf;YAAU;WACtD,CAAC;QACJ,CAAC,CAAC;;KAEL,MAAM;MACLmB,KAAK,CAAC,0CAA0C,CAAC;;EAErD;CAKD;AApDY7B,oBAAoB,GAAA8B,UAAA,EALhChC,SAAS,CAAC;EACTiC,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,C,EACWjC,oBAAoB,CAoDhC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}